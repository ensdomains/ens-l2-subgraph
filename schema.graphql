type Domain @entity {
  id: ID! # context-namehash
  context: Bytes
  name: String
  namehash: Bytes
  labelName: String
  labelhash: Bytes
  resolvedAddress: Bytes
  parent: Domain
  subdomains: [Domain!]! @derivedFrom(field: "parent") # Can count domains from length of array
  delegates: [Bytes!]
  resolver: Resolver
  expiryDate: BigInt
}

type Resolver @entity {
  id: ID!
  node: Bytes
  context: Bytes
  address: Bytes
  domain: Domain
  addr: Bytes
  contentHash: Bytes
  texts: [String!]
  coinTypes: [BigInt!]
}

type AddrChanged @entity(immutable: true) {
  id: Bytes!
  context: Bytes # bytes32
  name: Bytes # bytes32
  node: Bytes # bytes32
  a: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AddressChanged @entity(immutable: true) {
  id: Bytes!
  context: Bytes! # bytes32
  name: Bytes! # bytes32
  node: Bytes! # bytes32
  coinType: BigInt # uint256
  newAddress: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TextChanged @entity(immutable: true) {
  id: Bytes!
  context: Bytes! # bytes32
  name: Bytes! # bytes32
  node: Bytes! # bytes32
  indexedKey: String # string
  key: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ContenthashChanged @entity(immutable: true) {
  id: Bytes!
  context: Bytes! # bytes32
  name: Bytes! # bytes32
  node: Bytes! # bytes32
  indexedKey: String # string
  hash: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approved @entity(immutable: true) {
  id: Bytes!
  context: Bytes # bytes32
  name: Bytes # bytes32
  node: Bytes # bytes32
  delegate: Bytes! # address
  approved: Boolean! # boolean
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
